(define (parse-test test)
  (let ((input (lookup 'input test)))
    `(test-success ,(lookup 'description test)
                   =
                   knapsack
                   '(,(lookup 'maximumWeight input)
                     (,@(map (lookup-partial 'weight)
                             (lookup 'items input)))
                     (,@(map (lookup-partial 'value)
                             (lookup 'items input))))
                   ,(lookup 'expected test))))

(define (spec->tests spec)
  `(,@(map parse-test (lookup 'cases spec))
    (test-success "example with 30 items"
                  =
                  knapsack
                  '(100000
                    (90001 89751 10002 89501 10254 89251 10506 89001 10758 88751
                           11010 88501 11262 88251 11514 88001 11766 87751 12018 87501
                           12270 87251 12522 87001 12774 86751 13026 86501 13278 86251)
                    (90000 89750 10001 89500 10252 89250 10503 89000 10754 88750
                           11005 88500 11256 88250 11507 88000 11758 87750 12009 87500
                           12260 87250 12511 87000 12762 86750 13013 86500 13264 86250))
                  99798)
    (test-success "example with 50 items"
                  =
                  knapsack
                  '(341045
                    (4912 99732 56554 1818 108372 6750 1484 3072 13532 12050
                          18440 10972 1940 122094 5558 10630 2112 6942 39888 71276
                          8466 5662 231302 4690 18324 3384 7278 5566 706 10992 27552
                          7548 934 32038 1062 184848 2604 37644 1832 10306 1126 34886
                          3526 1196 1338 992 1390 56804 56804 634)
                    (1906 41516 23527 559 45136 2625 492 1086 5516 4875 7570 4436
                          620 50897 2129 4265 706 2721 16494 29688 3383 2181 96601
                          1795 7512 1242 2889 2133 103 4446 11326 3024 217 13269 281
                          77174 952 15572 566 4103 313 14393 1313 348 419 246 445
                          23552 23552 67))
                  142156)
    ;;      (lambda ()
    ;;        (test-success "example with 400 items"
    ;;                      =
    ;;                      knapsack
    ;;                      '(9486367
    ;;                        (76620 28868 25484 2502 104660 21908 16500 71980 18268 14564
    ;;                               19300 16028 16092 19844 13148 20572 17964 17044 18636 15948
    ;;                               15388 1970 13292 32892 122676 33068 20892 375380 19300 15820
    ;;                               34164 12260 12932 15452 2102 7868 16948 13500 7996 114788
    ;;                               542788 61996 17124 8580 37660 1128 7204 37500 22796 42836
    ;;                               39692 39980 944948 24692 16204 11996 178244 11212 12100 8716
    ;;                               9540 13420 40028 9692 9564 21924 10956 138492 29204 17204
    ;;                               205628 12436 25468 11132 9140 43604 542 38108 45940 408788
    ;;                               9364 7340 10340 16756 63204 28252 47932 156876 17644 9444
    ;;                               318036 20364 13116 9460 12916 136076 17644 19236 75524 22604
    ;;                               29652 9324 11132 253452 48468 27884 117684 199804 171044
    ;;                               159644 60836 154084 51156 40524 46420 18980 13964 8212 37660
    ;;                               11948 143100 35100 17716 14756 181332 53828 18572 15788
    ;;                               12884 18076 79612 7564 16156 17172 8100 17900 11004 63428
    ;;                               33972 40964 14276 168852 11204 81660 46500 95156 11068
    ;;                               131988 1848 71188 23020 254468 1108 8860 15516 25484 31140
    ;;                               34972 12388 3210 30236 10860 24052 21404 21052 102796 54988
    ;;                               15388 1128 1128 1128 1128 1128 1128 926660 1128 1128 1128
    ;;                               1128 1128 38692 20444 156876 1108 11812 12324 1108 1128 1128
    ;;                               1128 1128 1128 1128 1128 1108 3316 114556 1128 1128 1128
    ;;                               1128 1128 1128 249172 12996 1124 58836 18932 72460 11948
    ;;                               3140 27892 12132 34956 59996 98700 69084 2352 7846 18868
    ;;                               13708 41476 83756 18380 19508 6796 12748 7892 398532 33212
    ;;                               24260 38660 22012 12404 20124 27028 31572 56892 5156 18468
    ;;                               14244 10348 13236 10828 13708 20700 18652 20972 11276 10404
    ;;                               12020 13468 20972 12780 565460 278900 87660 41036 12964
    ;;                               32060 330364 21988 53156 11564 31892 156708 69580 2430
    ;;                               110276 2040 11940 99212 95588 2494 9956 19348 114612 112772
    ;;                               62316 11132 70820 19428 41028 53492 163380 193948 152700
    ;;                               50220 4464 40508 8090 144596 4902 161636 11844 27092 62172
    ;;                               119252 15276 37676 10924 63828 39724 19716 14868 24068 10548
    ;;                               35420 61916 94156 97796 97796 154052 273812 35548 11180
    ;;                               28124 12244 24420 35196 7972 22164 14204 24500 29444 58756
    ;;                               8372 10812 21004 35084 21492 15716 14812 24548 926660 43876
    ;;                               18964 23084 17900 24404 47308 16188 257028 219924 11540
    ;;                               102796 79836 32020 16028 15948 32892 32892 114788 542788
    ;;                               542788 542788 542788 205628 408788 136076 16156 25484 249172
    ;;                               34956 34956 53156 53156 53156 62172 28124 28124 28124 205644
    ;;                               3654 3265540 1344644 3457100 1198220 254348 1177692 927548
    ;;                               362140 263148 253092 230908 257964 101180 246292 9972 47332
    ;;                               241796 3389756 150108 1176140 80980 60732 267532 957012
    ;;                               260500 2895580)
    ;;                        (31860 11884 10492 901 43580 9004 6700 29940 7484 5932 7900
    ;;                               6564 6596 8172 5324 8436 7332 6972 7668 6524 6244 635 5396
    ;;                               13596 51188 13684 8596 156840 7900 6460 14132 4980 5216 6276
    ;;                               701 3084 6924 5500 3148 47844 226844 25748 7012 3440 15580
    ;;                               314 2852 15500 9348 17768 16396 16540 395124 10196 6652 4848
    ;;                               74372 4556 4900 3508 3820 5460 16564 3896 3832 9012 4428
    ;;                               57796 12052 7052 85864 5068 10484 4516 3620 18052 21 15804
    ;;                               19020 170844 3732 2920 4120 6828 26252 11676 19916 65488
    ;;                               7172 3772 132868 8332 5308 3780 5208 56788 7172 7868 31412
    ;;                               9252 12276 3712 4516 105876 20084 11492 49092 83452 71372
    ;;                               66572 25268 64292 21228 16812 19260 7740 5632 3256 15580
    ;;                               4824 59700 14500 7208 6028 75716 22364 7636 6444 5192 7388
    ;;                               33156 3032 6628 7036 3200 7300 4452 26364 14036 16932 5788
    ;;                               70476 4552 33980 19300 39628 4484 55044 574 29644 9460
    ;;                               106284 304 3580 6308 10492 12820 14436 5044 1155 12468 4380
    ;;                               9876 8752 8676 42848 22844 6244 314 314 314 314 314 314
    ;;                               387480 314 314 314 314 314 15996 8372 65488 304 4756 5012
    ;;                               304 314 314 314 314 314 314 314 304 1208 47728 314 314 314
    ;;                               314 314 314 104036 5248 312 24468 7716 30180 4824 1120 11496
    ;;                               4916 14428 24948 41100 28692 826 3073 7684 5604 17188 34828
    ;;                               7540 8004 2648 5124 3096 166516 13756 9980 15980 9056 5052
    ;;                               8212 11164 13036 23596 2028 7584 5772 4124 5368 4364 5604
    ;;                               8500 7676 8636 4588 4152 4860 5484 8636 5140 236380 116500
    ;;                               36480 16968 5232 13280 138032 9044 22028 4632 13196 65404
    ;;                               28940 865 45988 670 4820 41356 39844 897 4028 7924 47756
    ;;                               47036 25908 4516 29460 7964 16964 22196 68140 80924 63700
    ;;                               20860 1682 16804 3195 60348 1901 67468 4772 11196 25836
    ;;                               49676 6188 15588 4412 26564 16412 8108 6084 9884 4224 14660
    ;;                               25708 39228 40748 40748 64276 114356 14724 4540 11612 4972
    ;;                               10060 14548 3136 9132 5752 10100 12172 24428 3336 4356 8652
    ;;                               14492 8796 6408 6056 10124 387480 18188 7732 9492 7300 10052
    ;;                               19604 6644 107364 91812 4620 42848 33268 13260 6564 6524
    ;;                               13596 13596 47844 226844 226844 226844 226844 85864 170844
    ;;                               56788 6628 10492 104036 14428 14428 22028 22028 22028 25836
    ;;                               11612 11612 11612 85872 1377 1365820 562272 1445900 501060
    ;;                               106224 492496 387824 151320 109924 105696 96404 107732 42140
    ;;                               102896 4036 19616 100948 1417728 62604 491820 33740 25216
    ;;                               111716 400156 108800 1211040))
    ;;                      3967180))
    ))



(let ((spec (get-test-specification 'knapsack)))
  (put-problem!
   'knapsack
   `((test . ,(spec->tests spec))
     (version . ,(lookup 'version spec))
     (stubs knapsack)
     (skeleton . "knapsack.scm")
     (solution . "example.scm")
     (hints.md
      .
      ,(splice-exercism
        'knapsack
        '((sentence "In the scheme version the aruguments are the "
                    (inline-code "capacity")
                    " of the knapsack and a list of the "
                    (inline-code "weights")
                    " and a list of the "
                    (inline-code "values")
                    ".")
          (sentence "It won't be necessary to validate the input -- the
test inputs have valid values and same length lists.")))))))

