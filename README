# -*- mode: org -*-

#+TITLE: Exercism Scheme Track
#+AUTHOR: Jason Lewis

[[https://gitter.im/exercism/xscheme][https://badges.gitter.im/Join%20Chat.svg]]
[[https://travis-ci.org/exercism/scheme][https://travis-ci.org/exercism/scheme.svg?branch=master]]

Exercisms in scheme.

** Overview

   Welcome to the home of the exercism scheme track! Many parts of the
   track are specified in scheme such as the =config.json=, the
   exercise tests, and the documentation. The way to modify the track
   is usually to edit something in the [[https://github.com/exercism/scheme/tree/master/code][code/]] directory. Exercism
   problem implementations are done in [[https://github.com/exercism/scheme/tree/master/code/exercises][code/exercises/]]. Student facing
   documentation is built from files in [[https://github.com/exercism/scheme/tree/master/code/docs][code/docs/]].
    
** Setup

    To work on the scheme track you'll need [[https://cisco.github.io/ChezScheme/][ChezScheme]] . The json
    serialization library in =code/json.sls= relies on some modules
    from the [[https://github.com/fedeinthemix/chez-srfi][srfi]] collection, whose path needs to be visible to scheme
    via the =CHEZSCHEMELIBDIRS= environment variable. Instructions for
    installing the srfi collection can be found at
    [[https://github.com/fedeinthemix/chez-srfi/blob/master/srfi/INSTALL.chez][srfi/INSTALL.chez]]. If you're wise enough to use either the [[https://guix.gnu.org/][guix]] or
    [[https://nixos.org/nix/][nix]] package managers, you can find the srfis as a package
    there. For nix, they're in the nixpkgs unstable channel. 

    To verify your example solutions pass the tests, you also need [[https://www.gnu.org/software/guile/][GNU
    Guile]] installed. Implementations are checked by =make= using both
    schemes.

** Working on the Scheme track

    To work the track, you should start by heading to this directory
    and firing up a Scheme REPL. Once running enter =(load "load.ss")=
    to orchestrate loading the appropriate files.

*** Adding new problems
    
    Say you'd like to add =change=, a problem in the
    exercism/problem-specifications repository you think should be in
    the scheme track. The process for adding it to the track goes
    something like this:

     - =(stub-exercism 'change)= creates the stubs =test.ss=,
       =change.scm=, and =example.scm= in the directory
       =code/exercises/change/=.
     - In =test.ss=, you need to implement two functions to turn the
       specification json into a test suite, =spec->tests= and
       =parse-test=. The job of =spec->tests= is to take the
       canonical-data.json information parsed to scheme and find the
       test specs. Each test case is transformed runnable scheme
       function by =parse-test=, which ends up in the generated
       =test.scm= file (the file that the student uses to check their
       answers). See the subdirectories in [[https://github.com/exercism/scheme/tree/master/code/exercises][code/exercises/*]] for
       examples.
     - In =example.scm=, you need to implement an example solution to
       the problem. =(verify-exercism 'change)= checks that the
       solution passes generated test suite. The solution ought to
       work with =Guile= and =Chez=, with =(rnrs)= as the imported
       library.
     - =change.scm= contains the solution stub. Please make sure that
       the stub function(s) match the ones expected by the test suite,
       and that the arguments match the arguments in the =example.scm=
       solution. 
     -  Add the problem to the configuration expression in
       [[https://github.com/exercism/scheme/blob/master/config/track.ss][config/track.ss]]. You need to provide a uuid, which can be
       generated from the scheme repl by calling =(configlet-uuid)=
       (which is just a wrapper for the configlet binary). Finally,
       include the problem in the list of implementations in the
       [[https://github.com/exercism/scheme/blob/master/Makefile][Makefile]].

*** Adding problems not in exercism/problem-specifications

    New problems from outside of the specifications are welcome as
    well. Develop them as described above in the =code/exercises=
    directory, following pretty much the same process as above. The
    main difference is that instead of parsing test cases from the
    problem-specifications repository, you'll write them by hand in
    the =test.ss= file. Make sure to cover all the analogous
    requirements.

    If you're wondering about why there's a =closet= directory, where
    else should our skeletons go?

** Scheme icon

   The Scheme logo was created by
 https://en.wikipedia.org/wiki/User:Matthias.f and released under the
 Creative Commons Attribution-Share Alike 3.0 Unported license.  We
 adapted the logo, creating a pink/black version to use on Exercism.
