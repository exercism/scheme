#+TITLE: Exercism Scheme Track
#+AUTHOR: Jason Lewis

[[https://gitter.im/exercism/xscheme][https://badges.gitter.im/Join%20Chat.svg]]
[[https://travis-ci.org/exercism/scheme][https://travis-ci.org/exercism/scheme.svg?branch=master]]

Exercisms in scheme.

** Overview

   Most things run through the [[/code][code]] directory including exercise test
   generation and document generation. Besides that, as far as
   utilities go, the [[/bin][bin]] directory houses the configlet binary. The
   [[Makefile][Makefile]] is the main frontend for interacting with this code base,
   which has been designed to work from the scheme REPL, too.

   Problems are implemented in [[https://github.com/exercism/scheme/tree/master/code/exercises/][code/exercises/]]. The track contents are
   generated from there to [[https://github.com/exercism/scheme/tree/master/exercises][exercises/]]. The student facing track
   documentation is built from files in [[/code/docs][code/docs/]].

** Setup

    To work on the scheme track you'll want [[https://cisco.github.io/ChezScheme/][ChezScheme]] . The
    json serialization library in =code/json.sls= relies on some
    modules from the [[https://github.com/fedeinthemix/chez-srfi][srfi]] collection, whose path needs to be visible
    to scheme via the =CHEZSCHEMELIBDIRS= environment
    variable. Instructions for installing the srfi collection can be
    found at [[https://github.com/fedeinthemix/chez-srfi/blob/master/srfi/INSTALL.chez][srfi/INSTALL.chez]]. 

** Working on the Scheme track

    To work the track, you should start by heading to this directory
    and firing up a Scheme REPL. Once here enter =(load "load.ss")=,
    which will orchestrate loading the appropriate files.

*** Adding new problems
    
    Suppose you'd like to add =change=, a problem in the
    exercism/problem-specifications repository you think should be in
    the scheme track. The process for adding it to the track goes
    something like this:

     - =(stub-exercism 'change)= gets the canonical specification and
       creates =test.ss=, =change.scm=, and =example.scm= in the
       directory =code/exercises/change/=.
     - In =test.ss=, you need to implement two functions to turn the
       specification json into a test suite, =spec->tests= and
       =parse-test=. The job of =spec->tests= is to take the json
       parsed to a s-expression and find the test specs. Each test
       case is transformed runnable scheme function by =parse-test=,
       which ends up in the generated =test.scm= file (the file that
       the student uses to check their answers). See the
       subdirectories in [[https://github.com/exercism/scheme/tree/master/code/exercises][code/exercises/*]] for examples.
     - In =example.scm=, you need to implement an example solution to
       the problem. =(verify-exercism 'change)= checks that the
       solution passes generated test suite. The solution ought to
       work with =Guile= and =Chez=, with =(rnrs (6))= as the imported
       library.
     - =change.scm= contains the solution stub. Please make sure that
       the stub function(s) match the ones expected by the test suite,
       and that the arguments match the arguments in the =example.scm=
       solution. 
     - Finally, add the problem to the configuration expression in
       [[https://github.com/exercism/scheme/blob/master/code/config.ss][code/config.ss]]. You need to provide a uuid, which can be
       generated by the configlet binary or from the scheme repl by
       calling =(configlet-uuid)= (which is just a wrapper for
       configlet).

    If you're unsure about what problem to add, =(get-problem-list)=
    reads the problem-specifications repository and returns a list of
    specified problems.

    Last but not least, add the problem to the list of
    =implementations= in the Makefile so that it actually gets
    included in builds and tests!

*** Adding problems not in exercism/problem-specifications

    New problems from outside of the specifications are welcome as
    well. Develop them in the =code/exercises= directory, following
    the process outlined above, only from scratch. Make sure to cover
    analogous problem specification requirements. In particular,
    =test.ss= must implement a test-suite for the problem.

** Scheme icon

   The Scheme logo was created by https://en.wikipedia.org/wiki/User:Matthias.f
 and released under the Creative Commons Attribution-Share Alike 3.0 Unported license.
 We adapted the logo, creating a pink/black version to use on Exercism.
