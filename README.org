#+TITLE: Exercism Scheme Track
#+AUTHOR: Jason Lewis

[[https://gitter.im/exercism/xscheme][https://badges.gitter.im/Join%20Chat.svg]]
[[https://travis-ci.org/exercism/scheme][https://travis-ci.org/exercism/scheme.svg?branch=master]]

Exercism exercises in the Scheme Programming Language

** Setup
   To work on the scheme track you'll want [[https://cisco.github.io/ChezScheme/][ChezScheme]] installed. The
   json serialization library in =code/json.sls= relies on some
   modules from the [[https://github.com/fedeinthemix/chez-srfi][srfi]] collection, whose path needs to be visible to
   scheme via the =CHEZSCHEMELIBDIRS= environment
   variable. Instructions for installing the srfi collection can be
   found at [[https://github.com/fedeinthemix/chez-srfi/blob/master/srfi/INSTALL.chez][srfi/INSTALL.chez]].

   It is assumed that the [[https://github.com/exercism/problem-specifications][exercism/problem-specifications]] can be found
   in the same directory that this track is. If not, running =make=
   will clone it there. Make will also ensure that the =configlet=
   binary is in the =bin= directory, for formatting the =config.json=,
   linting the exercises, and generating fresh uuids for exercises.

** Working on Problems

   To work on problems, you should start by heading to this directory
   and firing up a Scheme REPL. Once running =(load "load.ss")=, which
   will orchestrate loading the appropriate files.

   The working example exercise will be the =halting-problem=, which
   ficticiously has a specification in the =problem-specification=
   repository.

*** Work flow
    To get started adding a problem, add the corresponding
    configuration entry in =code/config.ss=. To generate a fresh uuid
    for the problem, run =(configlet=uuid)=. 
      - =(get-problem-list)= reads the =problem-specification=
        repository and returns a list of problems that have
        specifications there. As luck would have it, the
        =halting-problem= is there!
      - You'd like to add it to the scheme track. To start, a stub
        implementation can be generated by running =(setup-exercism
        'halting-problem)=. This makes a directory
        =code/exercises/halting-problem= with the following stub files:
          + =README.md=, copied from the spec repo to which you can
            add additional information and hints.
          + =halting-problem.scm= -- the skeleton solution for the
            future students of the scheme track.
          + =example.scm=, which will contain an example solution you
            must provide.
          + Last but not least (indeed, most) =halting-problem.ss= is
            responsible for turning the specification into a test
            file. 
      - To view the =halting-problem= specification as an
        s-expression, run =(get-test-specification 'halting-problem)=,
        which parses the json.
      - More on =halting-probelm.ss=. To buld the test suite, you need
        to implement two functions, =spec->tests= and
        =parse-test=. The job of =spec->tests= is to take the parsed
        json and find the tests. Each test is then transformed to a
        quoted, runnable scheme function by =parse-test=, which will
        end up in the =test.scm= (the file that the student uses to
        check their answers). Examples of =test.scm= output may be
        found in eg =exercises/anagram/test.scm=.

** Dependencies

   Known dependencies include [[https://cisco.github.io/ChezScheme/][ChezScheme]], [[https://github.com/fedeinthemix/chez-srfi][chez-srfi]], make, bash, curl.

** Contributing Guide

Please see the [[https://github.com/exercism/x-api/blob/master/CONTRIBUTING.md#the-exercise-data][contributing guide]]

** Scheme icon

The Scheme logo was created by https://en.wikipedia.org/wiki/User:Matthias.f
 and released under the Creative Commons Attribution-Share Alike 3.0 Unported license.
We adapted the logo, creating a pink/black version to use on Exercism.
